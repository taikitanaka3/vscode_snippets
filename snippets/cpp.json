{
  "declare_parameters": {
    "prefix": "declare_parameters",
    "body": [
      "const auto dp = [this](const std::string & str, auto def_val) {",
      "\tstd::string name = \"$1.\" + str;",
      "\treturn this->declare_parameter(name, def_val);};"
    ]
  },
  "rclcpp::Publisher": {
    "prefix": "rclcpp::Publisher",
    "body": ["rclcpp::Publisher<$1>::SharedPtr pub_$2;"]
  },
  "rclcpp::": {
    "prefix": "rclcpp::Subscription",
    "body": ["rclcpp::Subscription<$1>::SharedPtr sub_$2;"]
  },
  "RCLCPP::WARN_STREAM_THROTTLE": {
    "prefix": "RCLCPP::INFO_STREAM_THROTTLE",
    "body": ["RCLCPP_INFO_STREAM_THROTTLE(logger_, *clock_, 50 ,[$1] $2);"]
  },
  "autoware_auto_control_msgs::msg": {
    "prefix": "autoware_auto_control",
    "body": ["autoware_auto_control_msgs::msg::"]
  },
  "autoware_auto_vehicle_msgs::msg": {
    "prefix": "autoware_auto_vehicle",
    "body": ["autoware_auto_vehicle_msgs::msg::"]
  },
  "autoware_auto_planning_msgs::msg": {
    "prefix": "autoware_auto_planning",
    "body": ["autoware_auto_planning_msgs::msg::"]
  },
  "autoware_auto_perception_msgs::msg": {
    "prefix": "autoware_auto_perception",
    "body": ["autoware_auto_perception_msgs::msg::"]
  },
  "autoware_auto_system_msgs::msg": {
    "prefix": "autoware_auto_system",
    "body": ["autoware_auto_system_msgs::msg::"]
  },
  "timer_callback": {
    "prefix": "timer_callback",
    "body": [
      "auto timer_callback = std::bind(&AutowareJoyControllerNode::onTimer, this);",
      "const auto period_ns =",
      "\tstd::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::duration<double>(period_s));",
      "timer_ = std::make_shared<rclcpp::GenericTimer<decltype(timer_callback)>>(",
      "\tthis->get_clock(), period_ns, std::move(timer_callback),",
      "\tthis->get_node_base_interface()->get_context());",
      "\tthis->get_node_timers_interface()->add_timer(timer_, nullptr);",
      "const auto period_ns =",
      "\tstd::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::duration<double>(period_s));"
    ]
  },

  "std::cout": {
    "prefix": "std::cout<<",
    "body": ["std::cout<<$1<<std::endl;"]
  },
  "std::vector": {
    "prefix": "std::vector<",
    "body": ["std::vector<$1> $2;"]
  },
  "std::unique_ptr": {
    "prefix": "std::unique_ptr",
    "body": ["std::unique_ptr<$1> $2;"]
  },
  "incremental for": {
    "prefix": "for (",
    "body": ["for (size_t $1 = 0; $1 < $2; $1++) {", "\t$0", "}"],
    "description": ""
  },
  "const range-based for": {
    "prefix": "for (const",
    "body": ["for (const auto $1: $1s) {", "\t$0", "}"],
    "description": "const iterator for"
  }
}
